/**
 * input: [1,2,3]
 * Subsequence: {{1},{2},{3},{1,2}, {2,3}, {1,3}, {1,2,3}}
 * Subset: {{},{1},{2},{3},{1,2}, {2,3}, {1,3}, {1,2,3}}
 * Subsequence: Need not to be contiguous, but maintains order i.e.
 * A subsequence of a string is the one which is generated by deleting 0 or more letters 
 * from the string and keeping the rest of the letters in the same order.
 * 
 * Subsequence is same as subset, only it doesn't have empty string
 */

const Subsequence = (input, subsequence, index, outputStr)  => {

    //Base case
    if(index>=input.length) {
        if(outputStr.length > 0) {
            subsequence.push(outputStr);
        }
        return;
    }

    //exclude
    Subsequence(input, subsequence, index+1, `${outputStr}`)
    //include
    outputStr = `${input[index]}${outputStr}`
    Subsequence(input, subsequence, index+1, outputStr)

}

const main = () => {
    let input = "abc";
    let subsequence = [];
    let outputStr = ""
    let index = 0;
    returnSubsequence(input, subsequence, index, outputStr);
}